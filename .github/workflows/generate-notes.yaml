name: generate-notes

on:
  workflow_dispatch:
    inputs:
      installerChartRegistry:
        description: 'Installer Chart Registry'
        type: string
        required: true
        default: 'https://charts.krateo.io/'
      installerChartRepository:
        description: 'Installer Chart Repository'
        type: string
        required: true
        default: 'installer'
      installerChartGithubRepository:
        description: 'Installer Chart Github Repository'
        type: string
        required: true
        default: 'installer-chart'
      installerChartVersion:
        description: 'Installer Chart Version'
        type: string
        required: true
        default: '2.5.1'
      installerChartVersionPrevious:
        description: 'Installer Chart Previous Version'
        type: string
        required: true
        default: '2.5.0'
      installerOrganization:
        description: 'GitHub Organization to get/publish release notes for the installer'
        type: string
        required: true
        default: 'krateoplatformops'
      organizations:
        description: 'Comma separated list of GitHub Organizations to retrieve release notes from'
        type: string
        required: true
        default: 'krateoplatformops,krateoplatformops-blueprints'

env:
  GHCR_REPO: ghcr.io/${{ github.repository }}

jobs:
  generate-notes:
    permissions:
      contents: write
      pull-requests: read
      issues: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Step that loops orgs and calls create-github-app-token for each
      - name: Generate tokens for all orgs
        id: tokens
        run: |
          set -e
          ORGS="${{ inputs.organizations }}"
          TOKENS=""

          for ORG in $(echo "$ORGS" | tr ',' ' '); do
            echo "Generating token for $ORG"

            TOKEN_JSON=$(gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $(ruby -ropenssl -rbase64 -e 'require "jwt"; puts JWT.encode({iss: $ENV["APP_ID"], iat: Time.now.to_i - 60, exp: Time.now.to_i + (10 * 60)}, OpenSSL::PKey::RSA.new(ENV["PRIVATE_KEY"]), "RS256")')" \
              /app/installations | jq -r ".[] | select(.account.login==\"$ORG\") | .id" | \
              xargs -I{} gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $(ruby -ropenssl -rbase64 -e 'require "jwt"; puts JWT.encode({iss: $ENV["APP_ID"], iat: Time.now.to_i - 60, exp: Time.now.to_i + (10 * 60)}, OpenSSL::PKey::RSA.new(ENV["PRIVATE_KEY"]), "RS256")')" \
                /app/installations/{}/access_tokens)

            TOKEN=$(echo "$TOKEN_JSON" | jq -r .token)

            if [ -z "$TOKENS" ]; then
              TOKENS="$TOKEN"
            else
              TOKENS="$TOKENS,$TOKEN"
            fi
          done

          echo "token-list=$TOKENS" >> $GITHUB_OUTPUT
        env:
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          GH_TOKEN: ${{ github.token }}

      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - run: |
          go run main.go
        env:
          INSTALLER_CHART_REGISTRY: ${{ inputs.installerChartRegistry }}
          INSTALLER_CHART_REPOSITORY: ${{ inputs.installerChartRepository }}
          INSTALLER_CHART_GITHUB_REPOSITORY: ${{ inputs.installerChartGithubRepository }}
          INSTALLER_CHART_VERSION: ${{ inputs.installerChartVersion }}
          INSTALLER_CHART_VERSION_PREVIOUS: ${{ inputs.installerChartVersionPrevious }}
          TOKEN: ${{ steps.tokens.outputs.token-list }}
          INSTALLER_ORGANIZATION: ${{ inputs.installerOrganization }}
          ORGANIZATIONS: ${{ inputs.organizations }}

      - id: "RELEASE_NOTES"
        run: cat release_notes.md

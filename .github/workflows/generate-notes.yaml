name: generate-notes

on:
  workflow_dispatch:
    inputs:
      installerChartRegistry:
        description: 'Installer Chart Registry'
        type: string
        required: true
        default: 'https://charts.krateo.io/'
      installerChartRepository:
        description: 'Installer Chart Repository'
        type: string
        required: true
        default: 'installer'
      installerChartGithubRepository:
        description: 'Installer Chart Github Repository'
        type: string
        required: true
        default: 'installer-chart'
      installerChartVersion:
        description: 'Installer Chart Version'
        type: string
        required: true
        default: '2.5.1'
      installerChartVersionPrevious:
        description: 'Installer Chart Previous Version'
        type: string
        required: true
        default: '2.5.0'
      installerOrganization:
        description: 'GitHub Organization to get/publish release notes for the installer'
        type: string
        required: true
        default: 'krateoplatformops'
      organizations:
        description: 'Comma separated list of GitHub Organizations to retrieve release notes from'
        type: string
        required: true
        default: 'krateoplatformops,krateoplatformops-blueprints'
      krateoRepository:
        description: 'Repository to append the release notes in /RELEASE_NOTES.md'
        type: string
        required: true
        default: 'krateo'
      

env:
  GHCR_REPO: ghcr.io/${{ github.repository }}

jobs:
  generate-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read

    steps:
      - uses: actions/checkout@v4

      - name: Generate tokens for each organization
        id: tokens
        run: |
          set -euo pipefail

          APP_ID="${{ secrets.APP_ID }}"
          PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}"

          # Write private key to a file
          echo "$PRIVATE_KEY" > key.pem

          # Install jq and openssl for JWT creation
          sudo apt-get update -y
          sudo apt-get install -y jq openssl

          generate_jwt() {
            local app_id=$1
            local now=$(date +%s)
            local iat=$((now - 60))
            local exp=$((now + 600))

            local header=$(printf '{"alg":"RS256","typ":"JWT"}' | openssl base64 -A | tr '+/' '-_' | tr -d '=')
            local payload=$(printf '{"iat":%s,"exp":%s,"iss":%s}' "$iat" "$exp" "$app_id" | openssl base64 -A | tr '+/' '-_' | tr -d '=')

            local data="$header.$payload"
            local signature=$(printf '%s' "$data" | openssl dgst -sha256 -sign key.pem | openssl base64 -A | tr '+/' '-_' | tr -d '=')

            echo "$data.$signature"
          }

          JWT=$(generate_jwt "$APP_ID")

          TOKENS=""

          for ORG in $(echo "${{ inputs.organizations }}" | tr ',' ' '); do
            echo "Processing org: $ORG"

            # Find installation ID for the org
            INSTALLATION_ID=$(curl -s -X GET \
              -H "Authorization: Bearer $JWT" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/app/installations \
              | jq -r ".[] | select(.account.login==\"$ORG\") | .id")

            if [ -z "$INSTALLATION_ID" ]; then
              echo "No installation found for $ORG"
              exit 1
            fi

            # Create installation token
            TOKEN=$(curl -s -X POST \
              -H "Authorization: Bearer $JWT" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens \
              | jq -r .token)

            if [ -z "$TOKENS" ]; then
              TOKENS="$TOKEN"
            else
              TOKENS="$TOKENS,$TOKEN"
            fi
          done

          echo "token-list=$TOKENS" >> $GITHUB_OUTPUT

      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - run: |
          go run main.go
        env:
          INSTALLER_CHART_REGISTRY: ${{ inputs.installerChartRegistry }}
          INSTALLER_CHART_REPOSITORY: ${{ inputs.installerChartRepository }}
          INSTALLER_CHART_GITHUB_REPOSITORY: ${{ inputs.installerChartGithubRepository }}
          INSTALLER_CHART_VERSION: ${{ inputs.installerChartVersion }}
          INSTALLER_CHART_VERSION_PREVIOUS: ${{ inputs.installerChartVersionPrevious }}
          TOKEN: ${{ steps.tokens.outputs.token-list }}
          INSTALLER_ORGANIZATION: ${{ inputs.installerOrganization }}
          ORGANIZATIONS: ${{ inputs.organizations }}
          KRATEO_REPOSITORY: ${{ inputs.krateoRepository }}

      - id: "RELEASE_NOTES"
        run: cat release_notes.md
